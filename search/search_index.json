{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SaaSOps Documentation","text":"<p>Repo located here</p>"},{"location":"#main-topics","title":"Main Topics","text":"<p>Note</p> <p>The documentation is at an early stage of development and is not complete and may also not represent latest operation or functionality.</p> <ul> <li>Installation</li> <li>Data structure description</li> <li>Setting up the Database and environment</li> <li>Adding Customers, Contracts, Segments and Invoices</li> <li>Running metrics analyses</li> <li>Exporting to various formats</li> <li>Running <code>pytest</code> tests</li> </ul>"},{"location":"#todos","title":"TODOs","text":"<ol> <li>Move into a docker container for install</li> <li>make the app call the name only, not python + main.py, PyPI packaging</li> <li>add in color selection for charts with config load</li> <li>build in sanity/correctness checking on inputs, </li> <li>export pptx function should take input filename as argument</li> </ol>"},{"location":"data_structure/","title":"Data Structure &amp; Definitions","text":""},{"location":"data_structure/#database-structure","title":"Database Structure","text":"<p>The application uses a PostgreSQL database to store information on contracts, customers, segments and invoices:</p> Object Description Customer Customer name, city and state Contract Contract details, referencing customer ID and including information on reference, booked contract date, overall term start and end dates and total value. If the contract is a renewal of prior contract an optional field links to ID of prior contract. Segment Represents a single revenue component of the parent contract. May be a Subscription or Service component. Has a total value and a segment start and end date. Invoice Linked to one or more segments, and segments may have one or more invoices. Invoices also have typical data such as issue date, amount and days payable. <p>This structure is described in greater detail below.</p>"},{"location":"data_structure/#understanding-segments","title":"Understanding Segments","text":"<p>A basic Contract often has two main components:</p> <ol> <li>Platform license subscription fee</li> <li>Installation and onboarding</li> </ol> <p>The Segment enables both of these components to be included in the database and helps ensure metrics and analysis output is based correctly on recurring and non-recurring revenue as appropriate.</p> <p>For each of the above, an individual Segment will be defined:</p> <ol> <li>Platform Subscription, of type Subscription with start date, end date and total segment value</li> <li>Installation Services, of type Services and perhaps just total segment value, depending on whether or not any date information is available.</li> </ol> <p>More complex Contracts may have multiple subscription components, each with different term dates and values. The Segment structure allows this detail to be captured.</p>"},{"location":"data_structure/#database-diagram","title":"Database Diagram","text":"<pre><code>classDiagram\n    Customer &lt;|-- Contract\n    Contract &lt;|-- Segment\n    Segment &lt;|-- Invoice\nclass Customer{\n    +int id\n    +String name\n    +String state\n    +String city\n}\nclass Contract{\n    +int id\n    +String reference\n}</code></pre>"},{"location":"generating_exports/","title":"Generating Exports","text":""},{"location":"generating_exports/#export-to-xlsx-pptx","title":"Export to XLSX &amp; PPTX","text":"<p>Objective of this function is to export data to formats suitable for compiling into a final presentation or report. Default exports of tables and charts to XLSX and PPTX is included:</p> <pre><code>$ saasops export all 2023-03-01 2023-06-30\n</code></pre> <p>Note</p> <p>The function currently relies on a PPTX template file, which should be located at <code>exports/ppt_template.pptx</code>. The slide template ID is currently hardcoded in Python, and may need adjusting to suit your specific template. Search for the <code>add_chart_slide()</code> function in <code>src/export.py</code>. This functionality will be improved soon.</p>"},{"location":"generating_exports/#export-image-charts","title":"Export image charts","text":"<p>Chart images can be generated as follows:</p> <pre><code>$ saasops export charts 2023-03-01 2023-06-30\n</code></pre> <p>Output images will be stored in the <code>/exports</code> folder.</p> <p>Gridlines can be included on various of the charts by passing the following flag:</p> <pre><code>--show-gridlines\n</code></pre>"},{"location":"installation/","title":"Installing SaaSOps","text":""},{"location":"installation/#cloning-repo","title":"Cloning repo","text":"<p>The best approach currently to installing SaaSOps is to clone the repo located here.</p> <p>Once cloned, run the following in the root folder of the repo:</p> <pre><code>$ pipenv shell\n$ pipenv install\n</code></pre>"},{"location":"installation/#installing-and-setting-up-postgresql","title":"Installing and setting up PostgreSQL","text":"<pre><code>$ sudo apt install postgresql\n</code></pre> <p>using psql with sudo setting up template db for testing copy</p>"},{"location":"installation/#checking-using-pytest","title":"Checking using pytest","text":"<p>Best next step to check everything is working is to run:</p> <pre><code>$ pytest\n</code></pre> <p>and check that everything tested out correctly.</p>"},{"location":"managing_data/","title":"Managing Input Data","text":"<p>Using the CLI the various input data can be added to the tables in the database.</p> <p>Note</p> <p>The code examples below assume the app is executed with <code>saasops</code> achieved by an alias <code>alias saasops='python main.py'</code>. This achieves similar usability as if the app had been packaged with PyPI.</p>"},{"location":"managing_data/#adding-customers","title":"Adding Customers","text":"<p>The help information including argument details can be accessed using:</p> <pre><code>$ saasops customer add --help\n</code></pre> <p>A typical command to add a customer is below. Note that any arguments containing spaces and other punctuation should be surrounded in quotes to be recognized as a <code>String</code>:</p> <pre><code>$ saasops customer add 'Customer Name' City State\n</code></pre> <p>Then run a command to list the customers to confirm the data added is as intended:</p> <pre><code>$ saasops customer list\n</code></pre>"},{"location":"managing_data/#adding-contracts","title":"Adding Contracts","text":"<p>Access the general help info with:</p> <pre><code>$ saasops contract add --help\n</code></pre> <p>Typical command to add a contract would be:</p> <pre><code>$ saasops contract add 1 ContractRef 2022-04-01 2022-05-01 2023-04-30 120000\n</code></pre> <p>Note that a contract that is a renewal of a prior contract can be linked using <code>renewal-id</code>:</p> <pre><code>$ saasops contract add 2 RenewalRef 2023-04-01 2023-05-01 2024-04-30 180000 --renewal-id 1\n</code></pre> <p>It's necessary to link renewal contracts to ensure the metrics for expansion or contraction are reported instead of new or churn.</p> <p>Check the contract was added correctly with:</p> <pre><code>$ saasops contract list\n</code></pre>"},{"location":"managing_data/#adding-segments-reconciling","title":"Adding Segments &amp; Reconciling","text":"<p>As with customers and contracts, segments can be added with:</p> <pre><code>$ saasops segment add 1 2022-05-01 2023-04-30 'Platform License' Subscription 120000\n</code></pre> <p>Check the addition with:</p> <pre><code>$ saasops segment list\n</code></pre> <p>An important step in finishing up on contract and segment entry is to confirm reconciliation between a contract and its associated segments. The total value of the contract should match the total aggregate value of the segments. The app includes a reporting command to aid in this reconciliation:</p> <pre><code>$ saasops contract reconcile 1\n</code></pre> <p>This command will output the contract details and then a table with the associated segments. The aggregate value of the segments is calculated and reported after the table.</p> <p>Warning</p> <p>The app does not yet include an automated reconciliation feature, and so will not yet highlight instances where the total aggregate segment value is not equal to the contract value. At present this check must be done manually.</p>"},{"location":"managing_data/#adding-invoices","title":"Adding Invoices","text":"<p>To be completed.</p> <p>Note</p> <p>The Invoice structure is included for future app expansion. The current metrics and output functions do not require invoice information.</p>"},{"location":"managing_data/#amending-data-inputs","title":"Amending Data Inputs","text":"<p>Any entry in any of the database tables can be updated to a new value using:</p> <pre><code>$ saasops TABLE update ID FIELD VALUE\n</code></pre> <p>For example:</p> <pre><code>$ saasops contract update 1 contractdate 2022-03-01\n</code></pre> <p>To move the booked date of our example contract above forward one month.</p> <p>Field names can be found in the <code>create_tables.sql</code> script in the <code>data/</code> folder.</p>"},{"location":"running_analyses/","title":"Running Metrics Analyses","text":"<p>Each of the revenue and metrics reports can be filtered to specific customer or contract activity by passing flags to the commands as follows:</p> <pre><code>--customer ID\n--contract ID\n</code></pre> <p>Passing either flag will limit the reports generated to the specified customer or contract ID. Both flags can be passed but the contract ID filter will override the customer.</p>"},{"location":"running_analyses/#recognized-revenue-report","title":"Recognized Revenue Report","text":"<p>Recognized revenue reports can be run to reconcile with financial statements for consistency. Reports can be configured for end-of-month or middle-of-month timing.</p> <pre><code>$ saasops calc rev 2023-01-01 2023-12-31 mid\n$ saasops calc rev 2023-01-01 2023-12-31 end\n</code></pre> <p>Middle-of-month timing is often a good compromise as any segment with start date in first half of the month has a full month's revenue counted, and any segment with start date in the second half of the month has no revenue counted in that month with first full month recognized the following month. </p> <p>Report dates are updated depending on the <code>mid</code> or <code>end</code> flag passed to the command. Sample revenue report is below:</p> <pre><code>    Revenue, 2023-01-31 to 2023-06-30, type: end-month\n---------------------------------------------------------------------------------------------\n|                Customer | Jan-2023 | Feb-2023 | Mar-2023 | Apr-2023 | May-2023 | Jun-2023 |\n---------------------------------------------------------------------------------------------\n\u00a6          CUSTOMER       \u00a6    23000 \u00a6    23000 \u00a6    23000 \u00a6    23000 \u00a6    23000 \u00a6    23000 \u00a6\n+-------------------------+----------+----------+----------+----------+----------+----------\u00a6\n\u00a6          CUSTOMER       \u00a6        0 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6\n+-------------------------+----------+----------+----------+----------+----------+----------\u00a6\n\u00a6          CUSTOMER       \u00a6        0 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6\n+-------------------------+----------+----------+----------+----------+----------+----------\u00a6\n\u00a6          CUSTOMER       \u00a6        0 \u00a6        0 \u00a6     5660 \u00a6     5660 \u00a6     5660 \u00a6     5660 \u00a6\n+-------------------------------------------------------------------------------------------+\n</code></pre>"},{"location":"running_analyses/#bookings-carr-arr-report","title":"Bookings, CARR &amp; ARR Report","text":"<p>The report table showing bookings, CARR and ARR on a monthly basis (end-of-month timing) can be generated as follows:</p> <pre><code>$ saasops calc bkings 2023-03-01 2023-06-30\n</code></pre> <p>Sample report output is below:</p> <pre><code>Bookings, ARR and CARR, 2023-03-01 to 2023-06-30\n--------------------------------------------------------\n| Customer | Mar-2023 | Apr-2023 | May-2023 | Jun-2023 |\n--------------------------------------------------------\n\u00a6 Bookings \u00a6    70000 \u00a6        0 \u00a6        0 \u00a6   400000 \u00a6\n+----------+----------+----------+----------+----------\u00a6\n\u00a6      ARR \u00a6   301114 \u00a6   301114 \u00a6   301114 \u00a6   301114 \u00a6\n+----------+----------+----------+----------+----------\u00a6\n\u00a6     CARR \u00a6   301114 \u00a6   301114 \u00a6   301114 \u00a6   701114 \u00a6\n+------------------------------------------------------+\n</code></pre>"},{"location":"running_analyses/#mrr-inflowoutflow-report","title":"MRR Inflow/Outflow Report","text":"<p>A table showing inflow and outflows of Monthly Recurring Revenue can be generated using the <code>metrics</code> subcommand:</p> <pre><code>$ saasops calc metrics 2023-03-01 2023-06-30\n</code></pre> <p>Starting MRR applies at the beginning of each month, and Ending MRR at the end of each month. New, Churn, Expansion and Contraction are reported as aggregate over each month. Sample report output is shown below:</p> <pre><code>Metrics, 2023-03-01 to 2023-06-30\n---------------------------------------------------------------\n|        Customer - Mar-2023 | Apr-2023 | May-2023 | Jun-2023 |\n---------------------------------------------------------------\n\u00a6         New MRR \u00a6     5000 \u00a6        0 \u00a6        0 \u00a6        0 \u00a6\n+-----------------+----------+----------+----------+----------\u00a6\n\u00a6       Churn MRR \u00a6        0 \u00a6     2500 \u00a6        0 \u00a6        0 \u00a6\n+-----------------+----------+----------+----------+----------\u00a6\n\u00a6   Expansion MRR \u00a6        0 \u00a6     2000 \u00a6        0 \u00a6        0 \u00a6\n+-----------------+----------+----------+----------+----------\u00a6\n\u00a6 Contraction MRR \u00a6        0 \u00a6        0 \u00a6        0 \u00a6     1000 \u00a6\n+-----------------+----------+----------+----------+----------\u00a6\n\u00a6    Starting MRR \u00a6    10000 \u00a6    15000 \u00a6    14500 \u00a6    14500 \u00a6\n+-----------------+----------+----------+----------+----------\u00a6\n\u00a6      Ending MRR \u00a6    15000 \u00a6    14500 \u00a6    14500 \u00a6    13500 \u00a6\n+-------------------------------------------------------------+\n</code></pre>"},{"location":"running_analyses/#snapshot-carr-arr","title":"Snapshot CARR &amp; ARR","text":"<p>Point in time reports for CARR and ARR, showing totals by Customer, can be generated as follows:</p> <pre><code>$ saasops calc carr 2023-06-30\n$ saasops calc arr 2023-06-30\n</code></pre>"},{"location":"running_tests/","title":"Running tests","text":"<p>The app includes a set of tests for the report and metrics generation functions. Details can be found in <code>tests/</code>. The test framework uses <code>pytest</code>, and tests can be run from the root folder as follows:</p> <pre><code>$ pytest\n</code></pre> <p>Adding the <code>--verbose</code> flag will print out individual test details.</p> <p>Note</p> <p>Successful execution of the tests is reliant upon the test database being set-up as described here.</p>"},{"location":"running_tests/#testing-philosophy","title":"Testing philosophy","text":"<p>At a high-level, for simply-defined contract inputs, the outputs for the various metrics are deterministic and can be hard-coded into a test fixture.</p> <p>The test framework includes a series of cases, detailed in <code>tests/test_cases.xlsx</code>, that cover various permutations of contract types, renewals, churn and so on.</p> <p>An initial set of cases is included and the test framework will be expanded in future releases.</p>"},{"location":"setting_up/","title":"Setting up the database and environment","text":""},{"location":"setting_up/#creating-a-database","title":"Creating a database","text":"<p>PostgreSQL is used as the database back-end for the app. Assuming PostgreSQL is installed, the following command will open up the <code>psql</code> CLI tool for administering databases:</p> <pre><code>$ sudo -u postgres psql\n</code></pre> <p>Note this logs into psql as user <code>postgres</code>. Some extra commands, explained below, are needed to configure user rights correctly for the app. The following SQL statements will then create the database:</p> <pre><code>CREATE DATABASE dbname;\nCREATE USER username WITH PASSWORD 'password';\nGRANT ALL PRIVILEGES ON DATABASE dbname TO username;\n</code></pre>"},{"location":"setting_up/#configuring-the-app-environment","title":"Configuring the app environment","text":""},{"location":"setting_up/#creating-env","title":"Creating <code>.env</code>","text":"<p>A<code>.env</code> file in the root folder of the app specifies the various environment variables used to configure the app. The <code>.env</code> file should contain:</p> <pre><code>DB_HOST=localhost\nDB_USER=username\nDB_PASSWORD=password\n</code></pre> <p>Various authentication solutions can be implemented as well to maintain secrecy of the password as needed.</p>"},{"location":"setting_up/#setting-db_name","title":"Setting <code>DB_NAME</code>","text":"<p>The remaining variable is <code>DB_NAME</code>, which can be specified in a <code>bash</code> shell, for example, as:</p> <pre><code>$ export DB_NAME=dbname\n</code></pre>"},{"location":"setting_up/#configuring-the-test-database","title":"Configuring the test database","text":"<p>The test fixtures and functions included with the app require a test database. The following SQL statements and <code>psql</code> commands will create the necessary structure:</p> <pre><code>- CREATE USER testuser with PASSWORD 'testuser';\n- CREATE DATABASE template_test_db;\n- GRANT ALL PRIVILEGES ON DATABASE template_test_db TO testuser;\n</code></pre> <p>In <code>psql</code> run the following to create the table structure:</p> <pre><code>postgres# \\i create_tables.sql\n</code></pre> <p>Then run the following SQL statements in <code>psql</code>:</p> <pre><code>- ALTER USER testuser CREATEDB; to create new DBs\n- ALTER DATABASE template_test_db OWNER TO testuser;\n- ALTER TABLE (all_tables) OWNER TO testuser: -- Need to do this for the five tables)\n</code></pre>"},{"location":"setting_up/#included-sql-scripts","title":"Included SQL scripts","text":"<p>The repo includes the following SQL scripts:</p> <ul> <li>create_tables.sql = creates the table structures in the DB</li> <li>show_rows.sql = shows all rows in all tables</li> <li>delete_data.sql = delete all rows and tables in the DB</li> </ul>"}]}