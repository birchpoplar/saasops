{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SaaSOps Documentation","text":"<p>Repo located here</p>"},{"location":"#main-page-topics","title":"Main Page Topics","text":"<ul> <li>Installation</li> <li>Data structure description</li> <li>Setting up the Database and environment</li> <li>Adding Customers, Contracts, Segments and Invoices</li> <li>Running CLI analyses</li> <li>Exporting to images and PPTX</li> </ul>"},{"location":"data_structure/","title":"Data Structure &amp; Definitions","text":""},{"location":"data_structure/#database-structure","title":"Database Structure","text":"<p>The application uses a PostgreSQL database to store information on contracts, customers, segments and invoices:</p> Object Description Customer Customer name, city and state Contract Contract details, referencing customer ID and including information on reference, booked contract date, overall term start and end dates and total value. If the contract is a renewal of prior contract an optional field links to ID of prior contract. Segment Represents a single revenue component of the parent contract. May be a Subscription or Service component. Has a total value and a segment start and end date. Invoice Linked to one or more segments, and segments may have one or more invoices. Invoices also have typical data such as issue date, amount and days payable. <p>This structure is described in greater detail below.</p>"},{"location":"data_structure/#understanding-segments","title":"Understanding Segments","text":"<p>A basic Contract often has two main components:</p> <ol> <li>Platform license subscription fee</li> <li>Installation and onboarding</li> </ol> <p>The Segment enables both of these components to be included in the database and helps ensure metrics and analysis output is based correctly on recurring and non-recurring revenue as appropriate.</p> <p>For each of the above, an individual Segment will be defined:</p> <ol> <li>Platform Subscription, of type Subscription with start date, end date and total segment value</li> <li>Installation Services, of type Services and perhaps just total segment value, depending on whether or not any date information is available.</li> </ol> <p>More complex Contracts may have multiple subscription components, each with different term dates and values. The Segment structure allows this detail to be captured.</p>"},{"location":"data_structure/#database-diagram","title":"Database Diagram","text":"<pre><code>classDiagram\n    Customer &lt;|-- Contract\n    Contract &lt;|-- Segment\n    Segment &lt;|-- Invoice\nclass Customer{\n    +int id\n    +String name\n    +String state\n    +String city\n}\nclass Contract{\n    +int id\n    +String reference\n}</code></pre>"},{"location":"installation/","title":"Installing SaaSOps","text":""},{"location":"installation/#cloning-repo","title":"Cloning repo","text":"<p>The best approach currently to installing SaaSOps is to clone the repo located here.</p> <p>Once cloned, run the following in the root folder of the repo:</p> <pre><code>$ pipenv shell\n$ pipenv install\n</code></pre>"},{"location":"installation/#installing-and-setting-up-postgresql","title":"Installing and setting up PostgreSQL","text":"<pre><code>$ sudo apt install postgresql\n</code></pre> <p>using psql with sudo setting up template db for testing copy</p>"},{"location":"installation/#checking-using-pytest","title":"Checking using pytest","text":"<p>Best next step to check everything is working is to run:</p> <pre><code>$ pytest\n</code></pre> <p>and check that everything tested out correctly.</p>"},{"location":"installation/#from-original-readmemd-may-need-to-go-in-separate-md-file-here","title":"From original README.md - may need to go in separate .md file here","text":""},{"location":"installation/#setting-up-postgres-db","title":"Setting up Postgres DB","text":"<p>Log into psql as admin user:</p> <ul> <li>CREATE DATABASE dbname;</li> <li>CREATE USER user WITH PASSWORD 'password';</li> <li>GRANT ALL PRIVILEGES ON DATABASE dbname TO user;</li> </ul> <p>Edit the .dir-locals.el file:</p> <p>;; set SQL login parameters</p> <p>((sql-mode . ((sql-postgres-login-params    '((user :default \"user\")     (database :default \"dbname\")     (server :default \"localhost\")     (port :default 5432))))))</p> <p>Then open the create_tables.sql file, and hit y to load the directory local variables.</p>"},{"location":"installation/#template-db-in-postgres-for-testing","title":"Template DB in Postgres for testing","text":"<ul> <li>CREATE USER testuser with PASSWORD 'testuser';</li> <li>CREATE DATABASE template_test_db;</li> <li>GRANT ALL PRIVILEGES ON DATABASE template_test_db TO testuser;</li> <li>(in psql) ~\\i create_tables.sql~</li> <li></li> <li>GRANT ALL PRIVILEGES ON DATABASE postgres TO testuser; (so can connect with an engine)</li> <li>ALTER USER testuser CREATEDB; to create new DBs</li> <li>ALTER DATABASE template_test_db OWNER TO testuser;</li> <li>ALTER TABLE (all_tables) OWNER TO testuser: -- Need to do this for the five tables) Should have this as an SQL script that user can call into psql to set up correctly</li> </ul> <p>also need template_customer_db - or maybe even just standard db template</p>"},{"location":"installation/#sql-scripts","title":"SQL scripts","text":"<ul> <li>create_tables.sql = creates the table structures in the DB</li> <li>sample_data.sql = populates tables with the sample data</li> <li>show_rows.sql = shows all rows in all tables</li> <li>delete_data.sql = delete all rows and tables in the DB</li> </ul>"},{"location":"installation/#todos","title":"TODOs","text":"<ol> <li>Move into a docker container for install</li> <li>make the app call the name only, not python + main.py</li> <li>add in color selection for charts with config load</li> <li>build in sanity/correctness checking on inputs, e.g. end date after start date etc.</li> <li>export pptx function should take input filename as argument</li> </ol>"},{"location":"managing_data/","title":"Managing Input Data","text":"<p>Using the CLI the various input data can be added to the tables in the database.</p> <p>Note</p> <p>The code examples below assume the app is executed with <code>saasops</code> achieved by an alias <code>alias saasops='python main.py'</code>. This achieves similar usability as if the app had been packaged with PyPI.</p>"},{"location":"managing_data/#adding-customers","title":"Adding Customers","text":"<p>The help information including argument details can be accessed using:</p> <pre><code>$ saasops customer add --help\n</code></pre> <p>A typical command to add a customer is below. Note that any arguments containing spaces and other punctuation should be surrounded in quotes to be recognized as a <code>String</code>:</p> <pre><code>$ saasops customer add 'Customer Name' City State\n</code></pre> <p>Then run a command to list the customers to confirm the data added is as intended:</p> <pre><code>$ saasops customer list\n</code></pre>"},{"location":"managing_data/#adding-contracts","title":"Adding Contracts","text":"<p>Access the general help info with:</p> <pre><code>$ saasops contract add --help\n</code></pre> <p>Typical command to add a contract would be:</p> <pre><code>$ saasops contract add 1 ContractRef 2022-04-01 2022-05-01 2023-04-30 120000\n</code></pre> <p>Note that a contract that is a renewal of a prior contract can be linked using <code>renewal-id</code>:</p> <pre><code>$ saasops contract add 2 RenewalRef 2023-04-01 2023-05-01 2024-04-30 180000 --renewal-id 1\n</code></pre> <p>It's necessary to link renewal contracts to ensure the metrics for expansion or contraction are reported instead of new or churn.</p> <p>Check the contract was added correctly with:</p> <pre><code>$ saasops contract list\n</code></pre>"},{"location":"managing_data/#adding-segments-reconciling","title":"Adding Segments &amp; Reconciling","text":"<p>As with customers and contracts, segments can be added with:</p> <pre><code>$ saasops segment add 1 2022-05-01 2023-04-30 'Platform License' Subscription 120000\n</code></pre> <p>Check the addition with:</p> <pre><code>$ saasops segment list\n</code></pre> <p>An important step in finishing up on contract and segment entry is to confirm reconciliation between a contract and its associated segments. The total value of the contract should match the total aggregate value of the segments. The app includes a reporting command to aid in this reconciliation:</p> <pre><code>$ saasops contract reconcile 1\n</code></pre> <p>This command will output the contract details and then a table with the associated segments. The aggregate value of the segments is calculated and reported after the table. A manual reconciliation can then be done to ensure all segments have been captured.</p>"},{"location":"managing_data/#adding-invoices","title":"Adding Invoices","text":"<p>To be completed.</p>"},{"location":"managing_data/#amending-data-inputs","title":"Amending Data Inputs","text":"<p>Any entry in any of the database tables can be updated to a new value using:</p> <pre><code>$ saasops TABLE update ID FIELD VALUE\n</code></pre> <p>For example:</p> <pre><code>$ saasops contract update 1 contractdate 2022-03-01\n</code></pre> <p>To move the booked date of our example contract above forward one month.</p> <p>Field names can be found in the <code>create_tables.sql</code> script in the <code>data/</code> folder.</p>"}]}